buildscript {
	ext {
		springBootVersion = '1.5.4.RELEASE'
	}
	repositories {
		mavenCentral()
		maven { url "http://repo.spring.io/libs-snapshot" }
	}
	dependencies {
		classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
	}
}

apply plugin: 'java'
apply plugin: 'idea'
//apply plugin: 'war'
//apply plugin: 'pmd'
//apply plugin: 'checkstyle'
//apply plugin: 'jacoco'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'

repositories {
	mavenCentral()
	maven { url "http://repo.spring.io/libs-snapshot" }
}

def javaVersion = JavaVersion.VERSION_1_8
sourceCompatibility = javaVersion
targetCompatibility = javaVersion

dependencies {

	compile ('org.springframework.boot:spring-boot-starter') {
		exclude group: 'org.springframework.boot', module: 'spring-boot-starter-logging'
	}
	compile('org.springframework.boot:spring-boot-starter-log4j2')
	compile('org.apache.tomcat.embed:tomcat-embed-jasper')

	compile(

		// CSV
		[group: 'com.opencsv', name: 'opencsv', version: opencsv_version],

		// Commons
		[group: 'commons-codec', name: 'commons-codec', version: commons_codec_version],
		[group: 'org.apache.commons', name: 'commons-compress', version: commons_compress_version],
		[group: 'commons-io', name: 'commons-io', version: commons_io_version],
		[group: 'org.apache.commons', name: 'commons-lang3', version: commons_lang_version],

		// Dropbox
		[group: 'com.dropbox.core', name: 'dropbox-core-sdk', version: dropbox_version],

		// JSON
		[group: 'com.google.code.gson', name: 'gson', version: gson_version],

		// JSTL
		[group: 'javax.servlet', name: 'jstl', version: jstl_version],

		// Logging
		[group: 'com.lmax', name: 'disruptor', version: disruptor_version],

		// ORM
		[group: 'org.mybatis', name: 'mybatis', version: mybatis_version],
		[group: 'mysql', name: 'mysql-connector-java', version: mysql_connector_version],

		// Other
		[group: 'org.jfree', name: 'jfreechart', version: jfreechart_version],
		[group: 'com.sun.mail', name: 'javax.mail', version: mail_version],

		// Reports
		[group: 'net.sf.jasperreports', name: 'jasperreports', version: jasper_report_version],
		[group: 'com.lowagie', name: 'itext', version: itext_version],
		[group: 'org.codehaus.groovy', name: 'groovy-all', version: groovy_version],

		// Scheduler
		[group: 'org.quartz-scheduler', name: 'quartz', version: quartz_version],

		// XML
		[group: 'org.dom4j', name: 'dom4j', version: dom4j_version],
	)

	compileOnly(
		[group: 'org.apache.tomcat', name: 'tomcat-catalina', version: tomcat_version],
		[group: 'org.projectlombok', name: 'lombok', version: lombok_version],
	)

	testCompile(
		testCompile(group: 'junit', name: 'junit', version: junit_version) {
			exclude group: 'org.hamcrest', module: 'hamcrest-core'
		},
		testCompile(group: 'org.mockito', name: 'mockito-core', version: mockito_version) {
			exclude group: 'org.hamcrest', module: 'hamcrest-core'
		},
		[group: 'org.apache.tomcat', name: 'tomcat-catalina', version: tomcat_version],
		[group: 'org.hamcrest', name: 'hamcrest-all', version: hamcrest_version]
	)

	compile group: 'org.springframework', name: 'spring-webmvc', version: '4.3.9.RELEASE'
}

/*war {
	ext.prod = project.hasProperty('prod')
	if (ext.prod) {
		archiveName = 'ROOT.war'
		rootSpec.exclude('log4j2.xml')
		rootSpec.exclude('log4j2-prod.xml.template')
		rootSpec.rename('log4j2-prod.xml', 'log4j2.xml')
	} else {
		archiveName = 'stock-tracker.war'
		rootSpec.exclude('log4j2-prod.xml')
		rootSpec.exclude('log4j2-prod.xml.template')
	}
	rootSpec.exclude('app.properties.template')
	exclude('**//*bdd.sql')
}*/

/*checkstyle {
	sourceSets = [sourceSets.main]
	configFile = new File('checkstyle/sun_checks.xml')
}*/

/*test {
	finalizedBy jacocoTestReport
}*/
