apply plugin: 'war'
apply plugin: 'pmd'
apply plugin: 'checkstyle'
apply plugin: 'jacoco'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'

dependencyManagement {
	imports {
		mavenBom 'org.springframework.cloud:spring-cloud-dependencies:Dalston.SR2'
	}
}

configurations.all {
	exclude group: 'org.springframework.boot', module: 'spring-boot-starter-logging'
}

dependencies {

	compile(
		// Spring boot
		[group: 'org.springframework.boot', name: 'spring-boot-starter'],
		[group: 'org.springframework.boot', name: 'spring-boot-starter-web'],
		[group: 'org.springframework.boot', name: 'spring-boot-actuator'],
		[group: 'org.springframework.boot', name: 'spring-boot-starter-log4j2'],
		[group: 'org.springframework.cloud', name: 'spring-cloud-config-client'],
		[group: 'org.springframework.cloud', name: 'spring-cloud-starter-sleuth'],

		// Mybatis Spring boot
		[group: 'org.mybatis.spring.boot', name: 'mybatis-spring-boot-starter', version: spring_mybatis_version],

		// Spring
		[group: 'org.springframework', name: 'spring-webmvc'],
		[group: 'org.springframework', name: 'spring-context-support'],

		// CSV
		[group: 'com.opencsv', name: 'opencsv', version: opencsv_version],

		// Commons
		[group: 'commons-codec', name: 'commons-codec', version: commons_codec_version],
		[group: 'org.apache.commons', name: 'commons-compress', version: commons_compress_version],
		[group: 'commons-io', name: 'commons-io', version: commons_io_version],
		[group: 'org.apache.commons', name: 'commons-lang3', version: commons_lang_version],

		// Dropbox
		[group: 'com.dropbox.core', name: 'dropbox-core-sdk', version: dropbox_version],

		// Http
		[group: 'org.apache.httpcomponents', name: 'httpclient', version: http_client_version],

		// JSON
		[group: 'com.google.code.gson', name: 'gson', version: gson_version],

		// JSTL
		[group: 'javax.servlet', name: 'jstl'],

		// Logging
		[group: 'com.lmax', name: 'disruptor', version: disruptor_version],

		// ORM
		[group: 'mysql', name: 'mysql-connector-java', version: mysql_connector_version],

		// Other
		[group: 'org.jfree', name: 'jfreechart', version: jfreechart_version],
		[group: 'com.sun.mail', name: 'javax.mail', version: mail_version],

		// Reports
		[group: 'net.sf.jasperreports', name: 'jasperreports', version: jasper_report_version],
		[group: 'com.lowagie', name: 'itext', version: itext_version],
		[group: 'org.codehaus.groovy', name: 'groovy-all', version: groovy_version],

		// XML
		[group: 'org.dom4j', name: 'dom4j', version: dom4j_version],
	)

	providedRuntime(
		[group: 'org.springframework.boot', name: 'spring-boot-starter-tomcat'],
	)

	compileOnly(
		[group: 'org.projectlombok', name: 'lombok', version: lombok_version],
	)

	testCompile(
		testCompile(group: 'junit', name: 'junit', version: junit_version) {
			exclude group: 'org.hamcrest', module: 'hamcrest-core'
		},
		testCompile(group: 'org.mockito', name: 'mockito-core', version: mockito_version) {
			exclude group: 'org.hamcrest', module: 'hamcrest-core'
		},
		[group: 'org.hamcrest', name: 'hamcrest-all', version: hamcrest_version]
	)
}

war {
	ext.prod = project.hasProperty('prod')
	if (ext.prod) {
		archiveName = 'ROOT.war'
	} else {
		archiveName = 'stock-tracker.war'
	}
	rootSpec.exclude('log4j2-prod.xml.template')
	exclude('**/bdd.sql')
}

checkstyle {
	sourceSets = [sourceSets.main]
	configFile = new File('checkstyle/sun_checks.xml')
}

test {
	finalizedBy jacocoTestReport
}

compileJava.dependsOn(processResources)
